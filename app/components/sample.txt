'use client';

import { useState, useEffect } from 'react';

interface GalleryImage {
  id: number;
  imageUrl: string;
  title: string;
  altText: string;
  createdAt: string;
}

export default function GalleryManager() {
  const [images, setImages] = useState<GalleryImage[]>([]);
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
  const [uploading, setUploading] = useState(false);
  const [loading, setLoading] = useState(true);

  // Fetch gallery images
  const fetchImages = async () => {
    try {
      const response = await fetch('/api/gallery');
      const data = await response.json();
      setImages(data);
    } catch (error) {
      console.error('Error fetching images:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchImages();
  }, []);

  // Handle file selection
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setSelectedFiles(Array.from(e.target.files));
    }
  };

  // Upload images
  const handleUpload = async () => {
    if (selectedFiles.length === 0) return;

    setUploading(true);
    try {
      // Convert files to base64
      const imagePromises = selectedFiles.map(file => {
        return new Promise<{ name: string; content: string }>((resolve) => {
          const reader = new FileReader();
          reader.onload = (e) => {
            const base64 = e.target?.result as string;
            const base64Content = base64.split(',')[1]; // Remove data:image/... prefix
            resolve({
              name: file.name,
              content: base64Content
            });
          };
          reader.readAsDataURL(file);
        });
      });

      const imagesData = await Promise.all(imagePromises);

      // Upload to GitHub
      const uploadResponse = await fetch('/api/uploadimages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ images: imagesData }),
      });

      const uploadResult = await uploadResponse.json();

      if (uploadResult.success) {
        // Save to database
        for (const url of uploadResult.urls) {
          await fetch('/api/gallery', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              imageUrl: url,
              title: '',
              altText: ''
            }),
          });
        }

        // Refresh gallery
        await fetchImages();
        setSelectedFiles([]);
        // Clear file input
        const fileInput = document.getElementById('file-input') as HTMLInputElement;
        if (fileInput) fileInput.value = '';
        
        alert('Images uploaded successfully!');
      } else {
        throw new Error(uploadResult.message);
      }
    } catch (error) {
      console.error('Upload error:', error);
      alert('Failed to upload images');
    } finally {
      setUploading(false);
    }
  };

  // Delete image
  const handleDelete = async (id: number) => {
    if (!confirm('Are you sure you want to delete this image?')) return;

    try {
      const response = await fetch(`/api/gallery/${id}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        setImages(images.filter(img => img.id !== id));
        alert('Image deleted successfully!');
      } else {
        throw new Error('Failed to delete image');
      }
    } catch (error) {
      console.error('Delete error:', error);
      alert('Failed to delete image');
    }
  };

  if (loading) {
    return <div className="p-6">Loading gallery...</div>;
  }

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Gallery Management</h1>
      
      {/* Upload Section */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-6">
        <h2 className="text-lg font-semibold mb-4">Upload New Images</h2>
        <input
          id="file-input"
          type="file"
          multiple
          accept="image/*"
          onChange={handleFileSelect}
          className="mb-4"
        />
        
        {selectedFiles.length > 0 && (
          <div className="mb-4">
            <p className="font-medium">Selected files:</p>
            <ul className="list-disc list-inside">
              {selectedFiles.map((file, index) => (
                <li key={index}>{file.name}</li>
              ))}
            </ul>
          </div>
        )}
        
        <button
          onClick={handleUpload}
          disabled={selectedFiles.length === 0 || uploading}
          className="bg-blue-500 text-white px-4 py-2 rounded disabled:bg-gray-400"
        >
          {uploading ? 'Uploading...' : `Upload ${selectedFiles.length} Image(s)`}
        </button>
      </div>

      {/* Gallery Grid */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h2 className="text-lg font-semibold mb-4">Current Gallery ({images.length} images)</h2>
        
        {images.length === 0 ? (
          <p className="text-gray-500">No images in gallery yet.</p>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {images.map((image) => (
              <div key={image.id} className="border rounded-lg p-4">
                <img
                  src={image.imageUrl}
                  alt={image.altText || image.title}
                  className="w-full h-48 object-cover rounded mb-2"
                />
                <div className="flex justify-between items-center">
                  <div className="text-sm text-gray-600">
                    {image.title && <p>{image.title}</p>}
                    <p className="text-xs">
                      {new Date(image.createdAt).toLocaleDateString()}
                    </p>
                  </div>
                  <button
                    onClick={() => handleDelete(image.id)}
                    className="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600"
                  >
                    Delete
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}














<div className="bg-white p-6 rounded-lg shadow-md">
  <h2 className="text-lg font-semibold mb-4">
    Current Gallery ({images.length} images)
  </h2>

  {images.length === 0 ? (
    <p className="text-gray-500">No images in gallery yet.</p>
  ) : (
    <div className="flex overflow-x-auto space-x-4 pb-4 scrollbar-thin scrollbar-thumb-gray-300">
      {images.map((image) => (
        <div
          key={image.id}
          className="flex-none w-64 shadow-lg rounded-lg p-4 bg-white"
        >
          <img
            src={image.imageUrl}
            alt={image.altText || image.title}
            className="w-full h-64 object-cover rounded mb-2"
          />
          <div className="flex justify-between items-center">
            <div className="text-sm text-gray-600">
              {image.title && <p>{image.title}</p>}
              <p className="text-xs">
                {new Date(image.createdAt).toLocaleDateString()}
              </p>
            </div>
            <button
              onClick={() => handleDelete(image.id)}
              className="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600"
            >
              Delete
            </button>
          </div>
        </div>
      ))}
    </div>
  )}
</div>







import { motion } from 'framer-motion';
import { CalculatorIcon, GalleryThumbnailsIcon, HomeIcon, LogOutIcon, Menu, MoonIcon, PersonStanding, SunIcon, X } from 'lucide-react';
import Image from 'next/image'
import React, { JSX, ReactNode, useState, useEffect } from 'react'
import { BiSolidCustomize } from 'react-icons/bi';
import { FaProductHunt, FaUserCircle } from 'react-icons/fa';
import { MdOutlineProductionQuantityLimits } from "react-icons/md";
import { RiMailSendFill } from 'react-icons/ri';
import DashboardContent from './DashboardContent';
import Customize from './Customize';
import CalculatorPage from './Calculator';
import GalleryManager from './GalleryManager';

interface AdminDashboardProps {
  userMail?: string;
  onLogout?: () => void;
  children?: ReactNode;
}

const AdminDashboard: React.FC<AdminDashboardProps> = ({ userMail, onLogout }) => {
  const [isOpen, setIsOpen] = useState(true);
  const [activeSection, setActiveSection] = useState("dashboard");
  const [darkMode, setDarkMode] = useState(false);
  
  const sectionMap: Record<string, React.ReactElement> = {
    dashboard: React.createElement(DashboardContent as any, { userMail, onLogout, darkMode }),
    customize: <Customize darkMode={darkMode} />,
    calculator: <CalculatorPage darkMode={darkMode} />,
    gallery: <GalleryManager darkMode={darkMode} />
  }

  // Initialize dark mode from localStorage or system preference
  useEffect(() => {
    const savedDarkMode = localStorage.getItem('darkMode');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    if (savedDarkMode !== null) {
      setDarkMode(JSON.parse(savedDarkMode));
    } else if (systemPrefersDark) {
      setDarkMode(true);
    }
  }, []);

  // Apply dark mode class to document
  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    localStorage.setItem('darkMode', JSON.stringify(darkMode));
  }, [darkMode]);

  // Toggle dark mode
  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  // Get first letter of email for avatar
  const getAvatarLetter = (email: string) => {
    return email ? email.charAt(0).toUpperCase() : 'A'
  }

  return (
    <div className='relative flex w-full h-full bg-gray-100 dark:bg-gray-900 transition-colors duration-300'>
        {/* Top Right Icons - Updated with Dark Mode Toggle */}
        <div className='absolute flex gap-3 top-0 right-5 mt-2 z-10'>
          <button
            onClick={toggleDarkMode}
            className="p-2 rounded-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200"
            aria-label={darkMode ? "Switch to light mode" : "Switch to dark mode"}
          >
            {darkMode ? (
              <SunIcon size={20} className="text-yellow-400" />
            ) : (
              <MoonIcon size={20} className="text-gray-700" />
            )}
          </button>
          
          
          {/* Replace FaUserCircle with custom avatar */}
          <div className="flex items-center space-x-2">
            {userMail ? (
              <div className="flex items-center space-x-2 bg-gray-100 dark:bg-gray-800 px-3 py-1 rounded-full border border-gray-300 dark:border-gray-600">
                <div className="w-8 h-8 bg-[#F43C6D] rounded-full flex items-center justify-center text-white font-semibold text-sm">
                  {getAvatarLetter(userMail)}
                </div>
                <span className="text-gray-700 dark:text-gray-300 text-sm hidden md:block">{userMail}</span>
              </div>
            ) : (
              <FaUserCircle 
                onClick={() => setIsOpen(true)} 
                size={30} 
                className='hover:text-pink/100 text-gray-600 dark:text-gray-400'
              />
            )}
          </div>
        </div>

      <div
        className={`${isOpen ? 'w-64' : 'w-20'} relative bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 transition-all duration-300 flex flex-col z-20`}
      >

        {/* sidebar header */}
        <div className='flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700'>
          <Image
            src="/bblogo.png"
            alt='logo'
            width={50}
            height={50}
            className={`transition-all duration-300 ${!isOpen && 'hidden'}`}
          />
          <button 
            onClick={() => setIsOpen(!isOpen)}
            className="text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
          >
            {isOpen ? <X size={22} className='text-pink/60'/> : <Menu size={22} className='w-9' /> }
          </button>
        </div>
        
        {/* User Info in Sidebar - Only show when sidebar is open */}
        {isOpen && userMail && (
          <div className="px-4 py-3 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-[#F43C6D] rounded-full flex items-center justify-center text-white font-semibold">
                {getAvatarLetter(userMail)}
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium text-gray-900 dark:text-gray-100 truncate">Admin</p>
                <p className="text-xs text-gray-500 dark:text-gray-400 truncate">{userMail}</p>
              </div>
            </div>
          </div>
        )}
           
        {/* sidebar menu */}
        <nav className='flex-1 p-4'>
          {[
            { id: "dashboard", icon: <HomeIcon size={20} />, label: "Dashboard" },
            { id: "product", icon: <MdOutlineProductionQuantityLimits size={20} />, label: "Product" },
            { id: "inquiry", icon: <RiMailSendFill size={20} />, label: "Inquiry" },
            { id: "customize", icon: <BiSolidCustomize size={25} />, label: "Customize" },
            {id: "calculator", icon: <CalculatorIcon size={25}/>, label: "Calculator"},
            {id: "gallery" , icon: <GalleryThumbnailsIcon size={25}/>, label: "Gallery"}
          ].map(({ id, icon, label }) => (
            <div
              key={id}
              onClick={() => setActiveSection(id)}
              className={`flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors duration-200 ${
                activeSection === id 
                  ? "bg-pink/60 text-white dark:bg-pink/70" 
                  : "text-gray-700 dark:text-gray-300 hover:bg-pink/60 hover:text-white dark:hover:bg-pink/50"
              }`}
            >
              {icon}
              {isOpen && <span>{label}</span>}
            </div>
          ))}
        </nav>

        {/* logout */}
        <div className='p-4 border-t border-gray-400 dark:border-gray-600'>
          <button 
            onClick={onLogout}
            className='flex items-center gap-3 text-gray-700 dark:text-gray-300 hover:text-pink/80 w-full transition-colors duration-200'
          >
            <LogOutIcon size={20} />
            {isOpen && <span>Logout</span>}
          </button>
        </div>
      </div>
      
      {/* content of dashboard */}
      <div className="flex-1 p-6 transition-all duration-300 w-full h-full bg-white/100 dark:bg-gray-900">
        {sectionMap[activeSection]}
      </div>
    </div>
  )
}

export default AdminDashboard